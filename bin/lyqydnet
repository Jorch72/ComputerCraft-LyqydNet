local args = {...}

os.loadAPI("net")
os.loadAPI("packet")
os.loadAPI("connection")
os.loadAPI("netfile")
os.loadAPI("netscreen")

--modread

local oldPeriphCall = peripheral.call
local oldPullRaw = os.pullEventRaw

if not process then
	peripheral.call = function(...)
		if not shell then
			print("up in ur rednet co")
			return false
			--our logic here, since this should be inside rednet coroutine
		else
			return oldPeriphCall(...)
		end
	end
end

local modemState = {}

local validSides = {}
for k, v in pairs(rs.getSides()) do
	validSides[v] = true
end

local function validateSide(side)
	if type(side) ~= "string" then
		error("string expected")
	end
	if not validSides[side] then
		error("Invalid side")
	end
	if peripheral.getType(side) ~= "modem" then	
		error("No modem on "..side.." side", 3)
	end
	return true
end

if not process then
	function rednet.open(side)
		if validateSide(side) then
			modemState[side] = true
			peripheral.call(side, "open", os.getComputerID())
			peripheral.call(side, "open", 65535)
		end
	end

	function rednet.close(side)
		if validateSide(side) then
			modemState[side] = false
			peripheral.call(side, "close", os.getComputerID())
			peripheral.call(side, "close", 65535)
		end
	end

	function rednet.isOpen(side)
		if peripheral.getType(side) == "modem" then
			return modemState[side]
		end
	end
end

function rednet.send(recipient, message, protocol)
	for _, side in pairs(rs.getSides()) do
		if peripheral.getType(side) == "modem" and rednet.isOpen(side) then
			if term.current then
				local pack = packet.new("RM", recipient, message)
				pack.protocol = protocol
				net.send(pack)
			else
				net.send(packet.new("RM", recipient, message))
			end
			return
		end
	end
	error("No open sides")
end

function rednet.broadcast(message)
	return net.raw_send(65535, message)
end

local function processModemMessage(event, filter)
	if type(event[5]) == "table" and event[5].lyqydnet then
		if event[5].confirm then
			net.send(packet.new("PS", event[4], event[5], 4, 4))
		end
		if event[5].destination ~= os.computerID() then
			coroutine.resume(net.daemonTable.netd, "lyqydnet_packet", event[5])
		elseif event[5].type == "RM" and (not filter or filter == "rednet_message") then
			if term.current then
				os.queueEvent("rednet_message", event[5].origin, event[5].payload, event[5].protocol)
			else
				os.queueEvent("rednet_message", event[5].origin, event[5].payload, 0)
			end
		else
			if event[5].toSock and net.socketTable[event[5].toSock] then
				if net.socketTable[event[5].toSock] == coroutine.running() and (not filter or filter == "lyqydnet_packet") then
					os.queueEvent("lyqydnet_packet", event[5])
				else
					coroutine.resume(net.socketTable[event[5].toSock], "lyqydnet_packet", event[5])
				end
			end
		end
	else
		if modemState[event[2]] and (event[3] == os.computerID() or event[3] == 65535) then
			if not filter or filter == "rednet_message" then
				if term.current then
					os.queueEvent("rednet_message", event[4], event[5].message, event[5].sProtocol)
				else
					os.queueEvent("rednet_message", event[4], event[5], event[6])
				end
			end
		end
	end
end

if not process then
	function _G.os.pullEventRaw(filter)
		if getfenv(2).CHANNEL_REPEAT and getfenv(2).CHANNEL_BROADCAST then
			--in rednet coroutine, theoretically, so should run only once per event.
			while true do
				local event = {oldPullRaw()}
				if event[1] == "modem_message" then
					processModemMessage(event, filter)
				elseif event[1] == "timer" and event[2] == net.networkDaemonTimeout then
					coroutine.resume(net.daemonTable.netd, unpack(event))
				else
					if not filter or filter == event[1] then
						return unpack(event)
					end
				end
			end
		else
			return oldPullRaw(filter)
		end
	end
end

--begin netd functionality
local routing = false
local longlink = false
local forwardTable = {}
local endpointTable = {}
local infoWaitTable = {}

if #args >= 1 then
	if args[1] == "route" then
		routing = true
		if args[2] and args[2] == "longlink" then
			longlink = true
		end
	end
end

local function readHosts()
	if fs.exists("/etc/hosts") then
		local file = io.open("/etc/hosts", "r" )
		local line = file:read()
		while line do
			net.add_route(string.match(line, "(%d+):"), string.match(line, ";([CTR]) "), string.match(line, ";[CTR] ([^\n]+)"), string.match(line, ":(%d+),"), string.match(line, ",(%d+);"))
			line = file:read()
		end
		file:close()
	elseif not fs.isDir("/etc") then
		fs.makeDir("/etc")
	end
end

local function saveHosts()
	local file = io.open("/etc/hosts", "w" )
	if file then
		for rNum, rInfo in ipairs(net.routeTable) do
			if rInfo then
				file:write(rInfo.idNum..":"..rInfo.gateway..","..rInfo.cost..";"..rInfo.type.." "..rInfo.name.."\n")
			end
		end
		file:close()
		return true
	end
	return false
end

local function saveForwardTable()
	local file = io.open( "etc/packets", "w" )
	if file then
		for pNum, pContents in ipairs( forwardTable ) do
			file:write( pContents.dest..">"..textutils.serialize(pContents.data).."\n" )
		end
		file:close()
		return true
	end
	return false
end

local function createHostTableString(exclude)
	local retStr = ""
	for rNum, rInfo in ipairs(net.routeTable) do
		if rInfo and rNum ~= exclude then
			retStr = retStr..rInfo.idNum..":"..os.computerID()..","..(rInfo.cost + 1)..";"..rInfo.type.." "..rInfo.name..">"
		end
	end
	return retStr
end

local function testEquality(p1, p2)
	if p1 == p2 then return true end
	if type(p1) ~= "table" then return false end
	for k1, v1 in pairs(p1) do
		local v2 = p2[k1]
		if not testEquality(v1, v2) then return false end
	end
	for k2, v2 in pairs(p2) do
		local v1 = p1[k2]
		if not testEquality(v1, v2) then return false end
	end
	return true
end

local function createHostTable(exclude)
	local hostTable = {}
	for rNum, rInfo in ipairs(net.routeTable) do
		if rInfo and rNum ~= exclude then
			local infoTable = {
				id = rInfo.idNum,
				gateway = os.computerID(),
				cost = rInfo.cost + 1,
				type = rInfo.type,
				label = rInfo.name,
			}
			table.insert(hostTable, infoTable)
		end
	end
	table.insert(hostTable, {id = os.computerID(), gateway = -1, cost = 0, type = "R", label = os.getComputerLabel()})
	return hostTable
end

function netDaemon()
	readHosts()
	while true do
		local event = {coroutine.yield()}
		if event[1] == "lyqydnet_packet" then
			local pack = event[2]
			if pack.type == "HA" then
				local newRoute = net.add_route(pack.origin, pack.payload.type, pack.payload.label, -1, 0)
				saveHosts()
				if routing then 
					net.send(packet.new("HT", pack.origin, createHostTable(newRoute), 4, 4))
					local hostData = {
						id = pack.origin,
						gateway = os.computerID(),
						--if we have arrived at this code, cost must be 1, 0 + 1.
						cost = 1,
						type = pack.payload.type,
						label = pack.payload.label,
					}
					--pass the new host information on to other routers as well as nearby hosts.
					for rNum, rInfo in ipairs(net.routeTable) do
						if rInfo and rInfo.type == "R" and rNum ~= newRoute then
							net.send(packet.new("HI", rInfo.idNum, hostData, 4, 4))
						elseif rInfo and rInfo.type ~= "R" and rNum ~= newRoute and rInfo.cost == 0 then
							net.send(packet.new("HI", rInfo.idNum, hostData, 4, 4))
						end
					end
					--if the computer coming online was a router that didn't respond to a forwarded packet, forward the packet again.
					for pNum, pContents in ipairs(forwardTable) do
						if pContents.dest == pack.origin then
							net.raw_send(pack.origin, pContents.data)
						end
					end
					--if the computer coming online was an endpoint, send on data for it.
					for pNum, pContents in ipairs(infoWaitTable) do
						if pContents.dest == pack.origin then
							net.raw_send(pack.origin, pContents.data)
						end
					end
				end
			elseif pack.type == "HI" then
				local routeNum = net.add_route(pack.payload.id, pack.payload.type, pack.payload.label, pack.payload.gateway, pack.payload.cost)
				saveHosts()
				if routing then
					for _, host in ipairs(infoWaitTable) do
						if pack.payload.id == host then
							--this was a dropped host we'd been waiting on info for.
							table.remove(infoWaitTable, _)
							local hostData = {
								id = pack.payload.id,
								gateway = os.computerID(),
								cost = net.routeTable[routeNum].cost + 1,
								type = pack.payload.type,
								label = pack.payload.label,
							}
							--update and correct nearby hosts.
							for rNum, rInfo in ipairs(net.routeTable) do
								if rInfo and rInfo.type ~= "R" and rInfo.idNum ~= host and rInfo.cost == 0 then
									net.send(packet.new("HC", rInfo.idNum, hostData, 4, 4))
								end
							end
							break
						end
					end
				end
			elseif pack.type == "HC" then
				local routeNum = net.add_route(pack.payload.id, pack.payload.type, pack.payload.label, pack.payload.gateway, pack.payload.cost)
				net.routeTable[routeNum].gateway, net.routeTable[routeNum].cost, net.routeTable[routeNum].name = pack.payload.gateway, pack.payload.cost, pack.payload.label
				saveHosts()
			elseif pack.type == "HQ" then
				if (pack.payload.label and pack.payload.label == os.getComputerLabel()) or (pack.payload.id and pack.payload.id == os.computerID()) then
					local body = {
						label = os.getComputerLabel(),
						type = turtle and "T" or (routing and "R" or "C"),
					}
					net.raw_send(65535, packet.new("HA", 65535, body, 4, 4))
				elseif routing then
					if pack.payload.label then
						local route = net.routeFromName(pack.payload.label)
						net.raw_send(net.CIDFromRoute(route), pack)
						net.remove_route(route)
					elseif pack.payload.id then
						net.raw_send(tonumber(pack.payload.id), pack)
						net.remove_route(net.routeFromCID(pack.payload.id))
					end
				else
					if pack.payload.label then
						net.remove_route(net.routeFromName(pack.payload.label))
					elseif pack.payload.id then
						net.remove_route(net.routeFromCID(pack.payload.id))
					end
				end
			elseif pack.type == "HR" then
				--host removal.
				local routeNum = net.routeFromCID(pack.payload)
				if routeNum then
					net.remove_route(routeNum)
					for cNum, cInfo in pairs(connection.connectionTable) do
						if cInfo and cInfo.remote == pack.payload then
							connection.connectionTable[cNum] = false
						end
					end
					if routing then
						for rNum, rInfo in ipairs(net.routeTable) do
							if rInfo and rInfo.cost == 0 and rInfo.type ~= "R" then
								--send HR packet to all close non-routers.
								net.raw_send(rInfo.idNum, pack)
								break
							end
						end
					end
				end
				saveHosts()
			elseif pack.type == "HT" then
				for _, hostInfo in ipairs(pack.payload) do
					net.add_route(hostInfo.id, hostInfo.type, hostInfo.label, hostInfo.gateway, hostInfo.cost)
				end
				saveHosts()
			elseif routing and pack.type ~= "SI" and pack.destination ~= os.computerID() then
				if pack.type == "HI" or pack.type == "HC" then
					--these are host information packets and must be manipulated to ensure correct information.
					pack.payload.gateway = os.computerID()
					pack.payload.cost = pack.payload.cost + 1
				end
				if longlink then
					pack.confirm = true
					table.insert(forwardTable, {dest = pack.destination, data = pack})
					saveForwardTable()
				end
				if net.routeTable[net.routeFromCID(pack.destination)].cost == 0 then
					--endpoint confirmation
					pack.confirm = true
					print(pack.destination)
					table.insert(endpointTable, {dest = pack.destination, data = pack})
					net.networkDaemonTimeout = os.startTimer(2)
				end
				if not net.send(pack, longlink) then
					net.send(packet.new("RR", pack.origin, "not_found"))
				end
			elseif pack.type == "PS" then
				print(#endpointTable)
				--packet success confirmation
				for pNum, pContents in ipairs(forwardTable) do
					if testEquality(pContents.data, pack.payload) then
						table.remove(forwardTable, pNum)
						break
					end
				end
				saveForwardTable()
				for pNum, pContents in ipairs(endpointTable) do
					print(pNum)
					print(testEquality(pContents.data, pack.payload))
					if testEquality(pContents.data, pack.payload) then
						table.remove(endpointTable, pNum)
						break
					end
				end
				print(#endpointTable)
			elseif pack.type == "SI" then
				--instruction
				local instruction = type(pack.payload) == "table" and pack.payload.instruction or pack.payload
				if instruction == "route" then
					routing = true
					--[[if fs.exists( "etc/packets" ) then
						local file = io.open( "etc/packets", "r" )
						local sLine = file:read()
						while sLine do
							table.insert(forwardTable, {dest = string.match(sLine, "(%d+)>.*"), data = string.match(sLine, "%d+>(.*)")})
							sLine = file:read()
						end
						file:close()
					end]]
				elseif instruction == "longlink" then
					longlink = true
				elseif instruction == "announce" then
					if os.getComputerLabel() then
						local body = {
							label = os.getComputerLabel(),
							type = turtle and "T" or (routing and "R" or "C"),
						}
						local pack = packet.new("HA", 65535, body, 4, 4)
						net.raw_send(65535, pack)
					end
				elseif instruction == "turtlepacket" then
					table.insert(endpointTable, {dest = pack.payload.data.destination, data = pack.payload.data})
					net.networkDaemonTimeout = os.startTimer(2)
				end
			end
		elseif event[1] == "timer" and event[2] == net.networkDaemonTimeout then
			for hNum, hContents in ipairs(infoWaitTable) do
				for rNum, rInfo in ipairs(net.routeTable) do
					if rInfo and rInfo.type ~= "R" then
						net.send(packet.new("HR", rInfo.idNum, hContents.dest, 4, 4))
					end
				end
			end
			infoWaitTable = {}
			for pNum, pContents in ipairs(endpointTable) do
				for rNum, rInfo in ipairs(net.routeTable) do
					if rInfo and rInfo.type == "R" then
						net.send(packet.new("HQ", rInfo.idNum, {id = pContents.dest}, 4, 4))
					end
				end
				net.send(packet.new("HQ", pContents.dest, {id = pContents.dest}, 4, 4))
				net.remove_route(net.routeFromCID(pContents.dest))
				table.insert(infoWaitTable, {dest = pContents.dest, data = pContents.data})
				net.networkDaemonTimeout = os.startTimer(2)
			end
			endpointTable = {}
		end
	end
end

if process and process.id() then
	--if run in lyqydos, set up correct processes.
	local netd = process.new(netDaemon, "netd")
	net.socketTable[4] = netd.thread
	net.daemonTable.netd = netd.thread
	netd:queue("lyqydnet_packet", packet.new("SI", 0, "start"))
	net.netInit()

	local function pidFromThread(thread)
		for pNum, pInfo in pairs(process.list) do
			if pInfo and pInfo.thread == thread then return pNum end
		end
	end

	while true do
		local event = {os.pullEventRaw()}
		if event[1] == "modem_message" then
			for pNum, pInfo in ipairs(process.list) do
				if pInfo and pInfo.modem and pInfo.modem[event[2]] and pInfo.modem[event[2]][event[3]] then
					if pInfo.name ~= "lrnd" and pInfo.name ~= "lyqydnet" then
						pInfo:queue(unpack(event))
					end
				end
			end
			if event[3] == os.getComputerID() or event[3] == RN_BROADCAST and (type(event[5]) ~= "table" or not event[5].lyqydnet or event[5].type ~= "RM") then
				for pNum, pInfo in pairs(process.list) do
					if pInfo and pInfo.rednet and pInfo.rednet[event[2]] then
						if term.current then
							pInfo:queue("rednet_message", event[4], event[5].message, event[5].sProtocol)
						else
							pInfo:queue("rednet_message", event[4], event[5], event[6])
						end
					end
				end
			end
			if type(event[5]) == "table" and event[5].lyqydnet then
				if event[5].type == "RM" and (event[5].destination == os.getComputerID() or event[5].destination == RN_BROADCAST) then
					--copied from lrnd
					for pNum, pInfo in pairs(process.list) do
						if pInfo and pInfo.rednet and pInfo.rednet[event[2]] then
							if term.current then
								pInfo:queue("rednet_message", event[5].origin, event[5].payload, event[5].protocol)
							else
								pInfo:queue("rednet_message", event[5].origin, event[5].payload, 0)
							end
						end
					end
				elseif event[5].destination ~= os.computerID() or event[5].type == "HA" or event[5].type == "HT" or event[5].type == "HI" then
					process.getFromName("netd"):queue("lyqydnet_packet", event[5])
				else
					if net.socketTable[event[5].toSock] then
						process.list[pidFromThread(net.socketTable[event[5].toSock])]:queue("lyqydnet_packet", event[5])
					end
				end
			end
		elseif event[1] == "terminate" then
			return
		end
	end
else
	net.daemonAdd("netd", netDaemon, 4)
	net.netInit()
end
